I"(]<ul id="markdown-toc">
  <li><a href="#django实现迷你淘宝二--django安装与简介" id="markdown-toc-django实现迷你淘宝二--django安装与简介">Django实现迷你淘宝(二) — Django安装与简介</a>    <ul>
      <li><a href="#一安装django" id="markdown-toc-一安装django">一、安装Django</a>        <ul>
          <li><a href="#11-安装python" id="markdown-toc-11-安装python">1.1 安装python</a></li>
          <li><a href="#12-配置emacs" id="markdown-toc-12-配置emacs">1.2 配置Emacs</a></li>
          <li><a href="#13-安装django" id="markdown-toc-13-安装django">1.3 安装Django</a></li>
        </ul>
      </li>
      <li><a href="#二第一个django项目" id="markdown-toc-二第一个django项目">二、第一个Django项目</a>        <ul>
          <li><a href="#21-基础知识" id="markdown-toc-21-基础知识">2.1 基础知识</a>            <ul>
              <li><a href="#211-查看版本号" id="markdown-toc-211-查看版本号">2.1.1 查看版本号</a></li>
              <li><a href="#212-新建django项目" id="markdown-toc-212-新建django项目">2.1.2 新建Django项目</a></li>
              <li><a href="#213-运行项目" id="markdown-toc-213-运行项目">2.1.3 运行项目</a></li>
              <li><a href="#214-修改数据库" id="markdown-toc-214-修改数据库">2.1.4 修改数据库</a></li>
            </ul>
          </li>
          <li><a href="#22-创建一个app" id="markdown-toc-22-创建一个app">2.2 创建一个App</a>            <ul>
              <li><a href="#221-编写第一个视图" id="markdown-toc-221-编写第一个视图">2.2.1 编写第一个视图</a></li>
              <li><a href="#222-创建一个新的model" id="markdown-toc-222-创建一个新的model">2.2.2 创建一个新的model</a></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />

<p>欢迎查看本系列的其他文章：</p>

<ol>
  <li><a href="https://blog.csdn.net/kewei168/article/details/105446135">postgres安装与入门</a></li>
  <li><a href="https://blog.csdn.net/kewei168/article/details/105446178">django安装与入门</a></li>
  <li><a href="https://blog.csdn.net/kewei168/article/details/105446311">基于django的用户验证系统实现</a></li>
  <li><a href="https://blog.csdn.net/kewei168/article/details/105852937">基于Bootstrap的商品页面设计与美化</a></li>
  <li><a href="https://blog.csdn.net/kewei168/article/details/106089391">基于jQuery和AJax的购物车设计与实现</a></li>
</ol>

<h1 id="django实现迷你淘宝二--django安装与简介">Django实现迷你淘宝(二) — Django安装与简介</h1>
<p>@[toc]</p>
<h2 id="一安装django">一、安装Django</h2>

<h3 id="11-安装python">1.1 安装python</h3>

<p><a href="https://www.python.org/downloads/">官网</a>下载最新版的python（至少3.0+），按照提示安装</p>

<h3 id="12-配置emacs">1.2 配置Emacs</h3>

<p>安装yapf，一款Google出品的python文件自动格式化工具</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>yapf
</code></pre></div></div>

<p>打开Emacs</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">M+x list-packages</code>列出所有安装包</li>
  <li><code class="language-plaintext highlighter-rouge">install py-yapf</code>，py-yapf会在保存python文件是自动调用yapf调整格式</li>
  <li><code class="language-plaintext highlighter-rouge">install elpy</code>，elpy是emacs下一个python开发环境包，提供了语法高亮，自动补全等特性</li>
</ol>

<p>要是不喜欢用命令行写代码，IDE推荐使用<a href="https://www.jetbrains.com/pycharm/">PyCharm</a>，学生邮箱还能申请免费使用JetBrain全家桶。</p>

<h3 id="13-安装django">1.3 安装Django</h3>

<p>在利用pip安装Django之前，为了保持我们电脑开发环境的整洁（和方便），我们先创建一个新的文件夹，并创立一个新的python3虚拟环境</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>testDjango
<span class="nb">cd </span>testDjango
python3 <span class="nt">-m</span> venv venv
</code></pre></div></div>

<p>激活虚拟环境（取消的话，<code class="language-plaintext highlighter-rouge">deactivate</code>）</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source </span>venv/bin/activate
</code></pre></div></div>

<p>输入<code class="language-plaintext highlighter-rouge">python --version</code>查看版本，应该显示的是python3.0+版本</p>

<p>利用pip安装Django</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>django
</code></pre></div></div>

<p>安装完成之后，进入python，输入一下指令</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">django</span>
<span class="k">print</span><span class="p">(</span><span class="n">django</span><span class="p">.</span><span class="n">get_version</span><span class="p">())</span>
</code></pre></div></div>
<p>或者直接命令行输入</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>django-admin <span class="nt">--version</span>
</code></pre></div></div>

<p>能正常输出版本号，即Django安装成功</p>

<h2 id="二第一个django项目">二、第一个Django项目</h2>

<p>这部分会带领你一步步的建立你的第一个Django项目</p>

<h3 id="21-基础知识">2.1 基础知识</h3>

<h4 id="211-查看版本号">2.1.1 查看版本号</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> django <span class="nt">--version</span>
</code></pre></div></div>

<h4 id="212-新建django项目">2.1.2 新建Django项目</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>django-admin startproject miniTaobao
</code></pre></div></div>

<p>利用tree指令（没有的话用brew或者apt安装一下）查看目录，会看到如下的结构：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span>
├── manage.py
└── miniTaoBao
    ├── __init__.py
    ├── asgi.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py
</code></pre></div></div>

<ul>
  <li>最外层的HelloWorld目录，只是目录名字，Django不会识别，你可以任意修改</li>
  <li><code class="language-plaintext highlighter-rouge">manage.py</code>: 一个命令行工具，让你与<code class="language-plaintext highlighter-rouge">Django</code>进行交互（如启动server或者新建App）</li>
  <li>里层的HelloWorld目录是该工程实际的python包名，用于导入里面的文件（如<code class="language-plaintext highlighter-rouge">import miniTaobao.urls</code>）</li>
  <li><code class="language-plaintext highlighter-rouge">miniTaoBao/__init__.py</code>: 一个空文件，用于告诉python这个目录应被识别为一个包</li>
  <li><code class="language-plaintext highlighter-rouge">miniTaoBao/settings.py</code>: 设置/配置Django项目的地方</li>
  <li><code class="language-plaintext highlighter-rouge">miniTaoBao/urls.py</code>: 该Django项目的URL声明，可以简单的理解为一个该工程支持的所有url的表格</li>
</ul>

<h4 id="213-运行项目">2.1.3 运行项目</h4>
<p>首先进入<code class="language-plaintext highlighter-rouge">miniTaobao/settings.py</code>文件修改一下配置，找到<code class="language-plaintext highlighter-rouge">ALLOWED_HOSTS</code>，添加<code class="language-plaintext highlighter-rouge">0.0.0.0</code>。
然后运行以下指令</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py runserver 0.0.0.0:8000
</code></pre></div></div>
<p>或者可以简写为<code class="language-plaintext highlighter-rouge">python manage.py runserver 0:8000</code>
这时候你可能会看到这样的红色字提醒</p>
<blockquote>
  <p>You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run ‘python manage.py migrate’ to apply them.</p>
</blockquote>

<p>暂时不用理解是什么，单纯的按照他说的，运行一下<code class="language-plaintext highlighter-rouge">python manage.py migrate</code>，然后重新运行一下。
此时打开浏览器，输入<code class="language-plaintext highlighter-rouge">0.0.0.0:8000</code>，你应该可以看到django成功运行的标志
<img src="https://img-blog.csdnimg.cn/20200411015217811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tld2VpMTY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>

<p>NOTE：使用0.0.0.0使得其他电脑也可以连接到你的服务器（前提你的电脑公网可见的话），127.0.0.1则只接受本地连接</p>

<h4 id="214-修改数据库">2.1.4 修改数据库</h4>
<p>django默认生成的是使用sqlite作为后端数据库的，这里我们改用PostgreSQL作为我们的数据库。因为sqlite只能本地访问，而postgresql是支持通过多台机器通过网络连接的，而且开源免费，功能也更加强大（具体配置可看前一篇<a href="https://blog.csdn.net/kewei168/article/details/105446135">文章</a>）。
打开<code class="language-plaintext highlighter-rouge">miniTaobao/settings.py</code>，找到<code class="language-plaintext highlighter-rouge">DATABASES</code>，修改为如下</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'default'</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">'ENGINE'</span><span class="p">:</span> <span class="s">'django.db.backends.postgresql'</span><span class="p">,</span>
        <span class="s">'NAME'</span><span class="p">:</span> <span class="s">'testDB'</span><span class="p">,</span>
        <span class="s">'USER'</span><span class="p">:</span> <span class="s">'postgres'</span><span class="p">,</span>
        <span class="s">'PASSWORD'</span><span class="p">:</span> <span class="s">'postgres'</span><span class="p">,</span>
        <span class="s">'HOST'</span><span class="p">:</span> <span class="s">'127.0.0.1'</span><span class="p">,</span>
        <span class="s">'PORT'</span><span class="p">:</span> <span class="s">'5432'</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>记得安装postgres的相关python包（否则可能会看到类似错误<code class="language-plaintext highlighter-rouge">Error loading psycopg2 module: No module named 'psycopg2'</code>）</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>psycopg2
</code></pre></div></div>
<p>运行程序，成功运行的话，证明切换数据库成功</p>

<p><strong>常见问题</strong></p>
<ol>
  <li>Library not loaded: libssl.1.1.dylib
尝试安装<code class="language-plaintext highlighter-rouge">psycopg2-binary</code>，这个包会包含一些常用的C库文件，如libssl
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>psycopg2-binary
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="22-创建一个app">2.2 创建一个App</h3>

<p>利用以下指令新建一个App（负责一个特定功能）</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py startapp <span class="nb">users</span>
</code></pre></div></div>
<p>这里我们新建一个users类，专门负责用户验证相关功能，如注册，登录</p>

<blockquote>
  <p>Project和App的区别
 App是一个Web应用，它应该支持某个功能（可以干某些事情），如博客，数据库等。
 Project是针对一个完整网站的一系列配置文件和App的集合。
 一个Project可以包含很多个App，而一个App也可以被应用在很多个Project里面。模块化思想！！！</p>
</blockquote>

<p>此时我们的项目目录应该变为</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── db.sqlite3
├── manage.py
├── miniTaoBao
│   ├── __init__.py
│   ├── __pycache__
│   │   ├── __init__.cpython-37.pyc
│   │   ├── settings.cpython-37.pyc
│   │   ├── urls.cpython-37.pyc
│   │   └── wsgi.cpython-37.pyc
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── users
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── migrations
    │   └── __init__.py
    ├── models.py
    ├── tests.py
    └── views.py
</code></pre></div></div>
<p>可以看到，在miniTaobao的同级目录下多了一个users的文件夹，这里简单解释一下app里每个文件的作用：</p>
<ul>
  <li>__init__.py： 用于声明该文件夹是一个python package</li>
  <li>admin.py：用于注册你的models（模型），对应数据库里面的数据</li>
  <li>apps.py：声明了这个App的一些相关信息（修改setting.py“安装”该app的时候会用得到）</li>
  <li>migrations：存放了数据库的修改历史（每次makemigrations就会生成一个新的文件，记录修改）</li>
  <li>models.py：用于声明你的models</li>
  <li>tests.py：用于编写Unit test</li>
  <li>views.py：编写你的视图函数（每个视图函数会对应一个url）</li>
</ul>

<p>注意，此时你只是新建了一个App，但是django还不能识别这个新的App，你还需要“注册”一下。
打开<code class="language-plaintext highlighter-rouge">miniTaobao/setting.py</code>找到<code class="language-plaintext highlighter-rouge">INSTALLED_APPS</code>，在最开始添加一行<code class="language-plaintext highlighter-rouge">'users.apps.UsersConfig',</code>，这样django就会识别新建的App了。</p>

<h4 id="221-编写第一个视图">2.2.1 编写第一个视图</h4>

<p>进入users目录，分别修改<code class="language-plaintext highlighter-rouge">view.py</code>和<code class="language-plaintext highlighter-rouge">urls.py</code>两个文件，内容如下</p>

<p><code class="language-plaintext highlighter-rouge">view.py</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
<span class="k">def</span> <span class="nf">home</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">"Hello, world. You're at the user page."</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">urls.py</code>（默认没有，自己新建一个）</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>
<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">home</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"home"</span><span class="p">),</span>
<span class="p">]</span>
</code></pre></div></div>

<p>NOTE：每一个App里面都有自己的view和url，一般来说两者是一一对应的，新增一个view，一般就对应一条新的URL</p>

<p>还记得前面说的吗？<code class="language-plaintext highlighter-rouge">miniTaobao/urls.py</code>记录了整个网站所有的url（当然也包含了这个新App！），所以现在我们需要去那里“登记”一下我们的url，打开<code class="language-plaintext highlighter-rouge">miniTaobao/urls.py</code>文件，修改成以下的样子（增加了<code class="language-plaintext highlighter-rouge">include</code>）</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">path</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">'users.urls'</span><span class="p">)),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'admin/'</span><span class="p">,</span> <span class="n">admin</span><span class="p">.</span><span class="n">site</span><span class="p">.</span><span class="n">urls</span><span class="p">),</span>
<span class="p">]</span>
</code></pre></div></div>

<p><a href="https://docs.djangoproject.com/en/3.0/ref/urls/#django.urls.include">include()</a> 函数使得我们可以“引用”其他的url配置。当Django遇到<code class="language-plaintext highlighter-rouge">include()</code>函数时，它会截断已经匹配到的url并将剩余部分发送到包含进来的url配置里面进行进一步的解析。<code class="language-plaintext highlighter-rouge">include()</code>函数让URL更加“插件化”，每一个app都可以有自己的URL匹配规则（如<code class="language-plaintext highlighter-rouge">users/urls.py</code>），然后每一个app可以被放置到不同的地方。
现在再次运行我们的程序，并打开浏览器输入<code class="language-plaintext highlighter-rouge">0.0.0.0:8000</code>，你就能看到你刚新建的页面了</p>

<p><img src="https://img-blog.csdnimg.cn/20200425032824810.png" alt="在这里插入图片描述" /></p>

<h4 id="222-创建一个新的model">2.2.2 创建一个新的model</h4>
<p>Django里面内置了一层ORM（Object-relational mapper）（用于把类映射到sql里面），所以我们不需要去写sql语句，只需要创建修改我们需要的类，剩下的事情，就都交给Django。</p>

<p>修改“model”三步走</p>

<ol>
  <li>在<code class="language-plaintext highlighter-rouge">models.py</code>里面修改model</li>
  <li><code class="language-plaintext highlighter-rouge">python manage.py makemigrations</code>，针对新的更改，生成migrations</li>
  <li><code class="language-plaintext highlighter-rouge">python manage.py migrate</code>，应用上一步生成的migrations</li>
</ol>

<p>牢记每次修改模型后，都需要运行<code class="language-plaintext highlighter-rouge">makemigrations</code>和<code class="language-plaintext highlighter-rouge">migrate</code>两个步骤，这两个就是告诉Django把我们类的更新，映射到SQL数据库里面（生成修改和执行修改）。</p>

<p>打开<code class="language-plaintext highlighter-rouge">users/models.py</code>，加入以下内容</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="c1"># Create your models here.
</span><span class="k">class</span> <span class="nc">Profile</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">OneToOneField</span><span class="p">(</span><span class="n">User</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">)</span>
    <span class="n">is_seller</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">BooleanField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">f'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">user</span><span class="p">.</span><span class="n">username</span><span class="si">}</span><span class="s"> Profile'</span>
</code></pre></div></div>
<p>这里我们声明了一个profile类，你可能会好奇这个profile类里面并没有姓名密码等常见字段，这是因为django自带就有一个user类（用于验证），user类里面已经帮我们把这些常用字段封装好了，所以我们声明一个<code class="language-plaintext highlighter-rouge">OneToOneField</code>，表明每个profile对象对应着一个user对象。</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">python manage.py makemigrations</code>
```shell
Migrations for ‘users’:
users/migrations/0001_initial.py
    <ul>
      <li>Create model Profile
```</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">python manage.py migrate</code>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Operations to perform:
Apply all migrations: admin, auth, contenttypes, sessions, <span class="nb">users
</span>Running migrations:
Applying users.0001_initial... OK
</code></pre></div>    </div>
  </li>
</ul>

<p>注意：如果此时<code class="language-plaintext highlighter-rouge">python manage.py makemigrations</code>显示No changes detected，很大可能是你忘了去setting.py里面“注册”这个app。</p>

<p>至此，我们就成功创建了一个新的App，并编写了第一个视图函数，创建了第一个类。</p>

<p>好了，django的基本介绍就到这里了，下一篇文章将会介绍如何利用我们创建的Profile类和django自带的用户验证系统，实现基本的登录注册功能。
<a href="">使用django内置的验证系统</a></p>

<p><a href="https://github.com/xkw168/blog-code/tree/f663f1d97548e3b62e79eb3929bf0858bcf9d349">本文代码</a></p>
:ET